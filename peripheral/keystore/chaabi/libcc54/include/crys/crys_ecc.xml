<?xml version="1.0" encoding="US-ASCII" ?>
<!--****************************************************************
* (c) Copyright 2011-2012 Discretix Technologies Ltd.              *
* This file is licensed under the terms provided in the file       *
* libcc54/LICENSE in this directory or a parent directory          *
*****************************************************************-->

<!-- SepRpcTest API description: An API dedicated to test the RPC mechanism -->

<api name="CrysEcc"> <!-- The ECC API Agent ID -->

<!-- Default return codes for generated wrapper code (may be overriden for specific functions -->
    <retcodes ok="CRYS_OK" generic_error="CRYS_ECC_HOST_MSG_GENERAL_RPC_A_ERROR" invalid_param="CRYS_ECC_HOST_MSG_GENERAL_RPC_B_ERROR" not_enough_resources="CRYS_ECC_HOST_MSG_GENERAL_RPC_C_ERROR" />
 <!--  Header files to include for prototypes
  -->
  <header>crys_host_rpc_config.h</header>
  <header>crys_ecpki_error.h</header>
  <header>crys_ecpki_build.h</header>
 <header>crys_ecpki_types.h</header>
  <header>crys_ecpki_ecdsa.h</header>
  <header>crys_ecpki_elgamal.h</header>
  <header>crys_ecpki_kg.h</header>
  <header>crys_ecpki_dh.h</header>


  <function name="CRYS_ECPKI_BuildPrivKey" return="le32(CRYSError_t)">
 <!--
    CRYSError_t CRYS_ECPKI_BuildPrivKey(
			    CRYS_ECPKI_DomainID_t      DomainID,	      /*in */
				DxUint8_t			      *PrivKeyIn_ptr,     /*in*/
				DxUint32_t                 PrivKeySizeInBytes,/*in*/
				CRYS_ECPKI_UserPrivKey_t  *UserPrivKey_ptr    /*out*/ );
  -->
  <param name="DomainID" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_DomainID_t)"/>
 <!-- CRYS_ECPKI_DomainID_t      DomainID
  -->
  <param name="PrivKeyIn_ptr" direction="i" ptype="array(PrivKeySizeInBytes,4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2)" dtype="DxUint8_t"/>
 <!-- DxUint8_t			      *PrivKeyIn_ptr
  -->
  <param name="PrivKeySizeInBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
 <!-- DxUint32_t                 PrivKeySizeInBytes
  -->
  <param name="UserPrivKey_ptr" direction="o" ptype="ref" dtype="CRYS_ECPKI_UserPrivKey_t" >
      <field name="valid_tag" direction="o" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PrivKeyDbBuff" direction="o" ptype="array(sizeof(CRYS_ECPKI_PrivKey_t),sizeof(CRYS_ECPKI_PrivKey_t))" dtype="DxUint8_t" />
  </param>
 <!-- CRYS_ECPKI_UserPrivKey_t  *UserPrivKey_ptr
  -->
  </function>
 <function name="_DX_ECPKI_BuildPublKey" return="le32(CRYSError_t)">
 <!--

    CRYSError_t  _DX_ECPKI_BuildPublKey(
									CRYS_ECPKI_DomainID_t        DomainID,	          /*in*/
									DxUint8_t			        *PublKeyIn_ptr,       /*in*/
									DxUint32_t                   PublKeySizeInBytes,  /*in*/
									EC_PublKeyCheckMode_t        CheckMode,           /*in*/
									CRYS_ECPKI_UserPublKey_t    *UserPublKey_ptr,     /*out*/
									CRYS_ECPKI_BUILD_TempData_t *TempBuff_ptr         /*in*/ );

  -->
 <param name="DomainID" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_DomainID_t)"/>
 <!-- CRYS_ECPKI_DomainID_t      DomainID
  -->
  <param name="PublKeyIn_ptr" direction="i" ptype="array(PublKeySizeInBytes,4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2)" dtype="DxUint8_t"/>
 <!-- DxUint8_t			      *PublKeyIn_ptr
  -->
   <param name="PublKeySizeInBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
 <!-- DxUint32_t                 PublKeySizeInBytes
  -->
   <param name="CheckMode" direction="i" ptype="val" dtype="le32(EC_PublKeyCheckMode_t)" />
  -->
   <param name="UserPublKey_ptr" direction="o" ptype="ref" dtype="CRYS_ECPKI_UserPublKey_t" >
      <field name="valid_tag" direction="o" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PublKeyDbBuff" direction="o" ptype="array(sizeof(CRYS_ECPKI_PublKey_t),sizeof(CRYS_ECPKI_PublKey_t))" dtype="DxUint8_t" />
  </param>
 <!-- CRYS_ECPKI_UserPublKey_t    *UserPublKey_ptr
  -->
  <param name="TempBuff_ptr" direction="i" ptype="wsbuf(sizeof(CRYS_ECPKI_BUILD_TempData_t))" dtype="CRYS_ECPKI_BUILD_TempData_t"  />

 <!-- CRYS_ECPKI_BUILD_TempData_t *TempBuff_ptr
  -->
  </function>


  <function name="CRYS_ECDSA_SignInit" return="le32(CRYSError_t)">
 <!--

    CRYSError_t CRYS_ECDSA_SignInit(
	                             CRYS_ECDSA_SignUserContext_t  *SignUserContext_ptr, /*in/out*/
								 CRYS_ECPKI_UserPrivKey_t      *SignerPrivKey_ptr,   /*in*/
								 CRYS_ECPKI_HASH_OpMode_t       HashMode             /*in*/ );


  -->
   <param name="SignUserContext_ptr" direction="io" ptype="ref" dtype="CRYS_ECDSA_SignUserContext_t" >
      <field name="valid_tag" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="AES_iv" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="context_buff" direction="io" ptype="array(sizeof(ECDSA_SignContext_t),sizeof(ECDSA_SignContext_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="SignerPrivKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPrivKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PrivKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PrivKey_t),sizeof(CRYS_ECPKI_PrivKey_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="HashMode" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_HASH_OpMode_t)"  />
  -->
  </function>


   <function name="CRYS_ECDSA_SignUpdate" return="le32(CRYSError_t)">
 <!--
    CRYSError_t CRYS_ECDSA_SignUpdate( CRYS_ECDSA_SignUserContext_t  *SignUserContext_ptr,  /*in/out*/
								             DxUint8_t                     *MessageDataIn_ptr,    /* in */
							  	             DxUint32_t                      DataInSize            /* in */ );
  -->
   <param name="SignUserContext_ptr" direction="io" ptype="ref" dtype="CRYS_ECDSA_SignUserContext_t" >
      <field name="valid_tag" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="AES_iv" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="context_buff" direction="io" ptype="array(sizeof(ECDSA_SignContext_t),sizeof(ECDSA_SignContext_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="MessageDataIn_ptr" direction="i" ptype="buf(DataInSize)" dtype="DxUint8_t" />
  -->
   <param name="DataInSize" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
 <!-- DxUint32_t      PrivKeySizeInBytes_ptr
  -->
  </function>

    <function name="_DX_ECDSA_SignFinish" return="le32(CRYSError_t)">
 <!--

    CRYSError_t _DX_ECDSA_SignFinish(
	                        CRYS_ECDSA_SignUserContext_t   *SignUserContext_ptr, /*in*/
							DxUint8_t                      *SignatureOut_ptr,    /*out*/
							DxUint32_t                     *SignatureOutSize_ptr,/*in/out*/
                            DxInt8_t                       IsEphemerKeyInternal, /*in*/
                            DxUint32_t                     *EphemerKeyData_ptr   /*in*/ );


  -->
  <param name="SignUserContext_ptr" direction="i" ptype="ref" dtype="CRYS_ECDSA_SignUserContext_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="AES_iv" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="context_buff" direction="i" ptype="array(sizeof(ECDSA_SignContext_t),sizeof(ECDSA_SignContext_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="SignatureOut_ptr" direction="o" ptype="array(*SignatureOutSize_ptr,4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2)" dtype="DxUint8_t"/>
  -->
   <param name="SignatureOutSize_ptr" direction="io" ptype="ref" dtype="le32(DxUint32_t)" />
  -->
     <param name="IsEphemerKeyInternal" direction="i" ptype="val" dtype="DxInt8_t"   />
  -->
    <param name="EphemerKeyData_ptr" direction="i" ptype="array(4*(CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+1)+2*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS,4*(CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+1)+2*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint32_t" />
  -->

  </function>


   <function name="CRYS_ECDSA_Sign" return="le32(CRYSError_t)">
 <!--
    CRYSError_t CRYS_ECDSA_Sign(
					CRYS_ECDSA_SignUserContext_t  *SignUserContext_ptr,     /*in/out*/
					CRYS_ECPKI_UserPrivKey_t      *SignerPrivKey_ptr,       /*in*/
					CRYS_ECPKI_HASH_OpMode_t       HashMode,                /*in*/
					DxUint8_t                     *MessageDataIn_ptr,       /*in*/
					DxUint32_t                     MessageSizeInBytes,      /*in*/
					DxUint8_t                     *SignatureOut_ptr,        /*out*/
					DxUint32_t                    *SignatureOutSize_ptr     /*in*/);

  -->
   <param name="SignUserContext_ptr" direction="i" ptype="wsbuf(sizeof(CRYS_ECDSA_SignUserContext_t))" dtype="CRYS_ECDSA_SignUserContext_t" />
  -->
   <param name="SignerPrivKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPrivKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PrivKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PrivKey_t),sizeof(CRYS_ECPKI_PrivKey_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="HashMode" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_HASH_OpMode_t)"   />
  -->
     <param name="MessageDataIn_ptr" direction="i" ptype="buf(MessageSizeInBytes)" dtype="DxUint8_t"  />
  -->
    <param name="MessageSizeInBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
  -->
    <param name="SignatureOut_ptr" direction="o" ptype="array((*SignatureOutSize_ptr),4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2)" dtype="DxUint8_t"  />
  -->
    <param name="SignatureOutSize_ptr" direction="io" ptype="ref" dtype="le32(DxUint32_t)"  />
  -->
  </function>



  <function name="CRYS_ECDSA_VerifyInit" return="le32(CRYSError_t)">
 <!--

    CRYSError_t CRYS_ECDSA_VerifyInit( CRYS_ECDSA_VerifyUserContext_t  *VerifyUserContext_ptr, /*in/out*/
								   CRYS_ECPKI_UserPublKey_t 	   *SignerPublKey_ptr,     /*in*/
								   CRYS_ECPKI_HASH_OpMode_t         HashMode               /*in*/ );

  -->
   <param name="VerifyUserContext_ptr" direction="io" ptype="ref" dtype="CRYS_ECDSA_VerifyUserContext_t" >
      <field name="valid_tag" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="AES_iv" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="context_buff" direction="io" ptype="array(sizeof(ECDSA_VerifyContext_t),sizeof(ECDSA_VerifyContext_t))" dtype="DxUint8_t" />
  </param>
  -->
  <param name="SignerPublKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPublKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PublKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PublKey_t),sizeof(CRYS_ECPKI_PublKey_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="HashMode" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_HASH_OpMode_t)"  />
  -->
  </function>


   <function name="CRYS_ECDSA_VerifyUpdate" return="le32(CRYSError_t)">
 <!--

   CRYSError_t CRYS_ECDSA_VerifyUpdate( CRYS_ECDSA_VerifyUserContext_t *VerifyUserContext_ptr, /*in/out*/
								     DxUint8_t                      *MessageDataIn_ptr,     /* in */
							  	     DxUint32_t                      DataInSize             /* in */ );

  -->
   <param name="VerifyUserContext_ptr" direction="io" ptype="ref" dtype="CRYS_ECDSA_VerifyUserContext_t" >
      <field name="valid_tag" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="AES_iv" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="context_buff" direction="io" ptype="array(sizeof(ECDSA_VerifyContext_t),sizeof(ECDSA_VerifyContext_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="MessageDataIn_ptr" direction="i" ptype="buf(DataInSize)" dtype="DxUint8_t"  />
  -->
     <param name="DataInSize" direction="i" ptype="val" dtype="le32(DxUint32_t)"  />
  -->
  </function>


  <function name="CRYS_ECDSA_VerifyFinish" return="le32(CRYSError_t)">
 <!--

   CRYSError_t CRYS_ECDSA_VerifyFinish(
	                         CRYS_ECDSA_VerifyUserContext_t *VerifyUserContext_ptr, /*in*/
							 DxUint8_t                      *SignatureIn_ptr,       /*in*/
							 DxUint32_t                      SignatureSizeBytes    /*in*/ );

  -->
   <param name="VerifyUserContext_ptr" direction="io" ptype="ref" dtype="CRYS_ECDSA_VerifyUserContext_t" >
      <field name="valid_tag" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="AES_iv" direction="io" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="context_buff" direction="io" ptype="array(sizeof(ECDSA_VerifyContext_t),sizeof(ECDSA_VerifyContext_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="SignatureIn_ptr" direction="i" ptype="array(SignatureSizeBytes,4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
     <param name="SignatureSizeBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"  />
  -->
  </function>



  <function name="CRYS_ECDSA_Verify" return="le32(CRYSError_t)">
 <!--

   CRYSError_t CRYS_ECDSA_Verify ( CRYS_ECDSA_VerifyUserContext_t *VerifyUserContext_ptr, /*in/out*/
									   	  CRYS_ECPKI_UserPublKey_t       *UserPublKey_ptr,        /*in*/
									      CRYS_ECPKI_HASH_OpMode_t        HashMode,               /*in*/
										  DxUint8_t                      *SignatureIn_ptr,        /*in*/
										  DxUint32_t                      SignatureSizeBytes,     /*in*/
										  DxUint8_t                      *MessageDataIn_ptr,      /*in*/
										  DxUint32_t                      MessageSizeInBytes      /*in*/ );

  -->
  <param name="VerifyUserContext_ptr" direction="i" ptype="wsbuf(sizeof(CRYS_ECDSA_VerifyUserContext_t))" dtype="CRYS_ECDSA_VerifyUserContext_t" />
  -->

  <param name="UserPublKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPublKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PublKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PublKey_t),sizeof(CRYS_ECPKI_PublKey_t))" dtype="DxUint8_t" />
  </param>
  -->
   <param name="HashMode" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_HASH_OpMode_t)"  />
  -->
   <param name="SignatureIn_ptr" direction="i" ptype="array(SignatureSizeBytes,4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
    <param name="SignatureSizeBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"  />
  -->
     <param name="MessageDataIn_ptr" direction="i" ptype="buf(MessageSizeInBytes)" dtype="DxUint8_t"  />
  -->
      <param name="MessageSizeInBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"  />
  -->
  </function>



  <function name="_DX_ECPKI_ELGAMAL_Encrypt" return="le32(CRYSError_t)">
 <!--

   CRYSError_t  _DX_ECPKI_ELGAMAL_Encrypt (
					CRYS_ECPKI_UserPublKey_t       *ReceiverUserPublKey_ptr, /*in*/
					DxUint8_t                      *MessageIn_ptr,           /*in*/
					DxUint32_t                      MessageInSizeBytes,      /*in*/
					DxUint8_t   				   *EncrMessageOut_ptr,      /*out*/
					DxUint32_t   				   *EncrMessOutSize_ptr,     /*in,out*/
				    DxInt8_t                        IsEphemerKeyInternal,    /*in*/
                    DxUint8_t                      *EphemerPrivKeyIn_ptr,    /*in*/
					DxUint32_t                      EphemerPrivKeySizeBytes, /*in*/
					CRYS_EC_ELGAMAL_TempData_t     *TempData_ptr             /*in*/ );

  -->
  <param name="ReceiverUserPublKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPublKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PublKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PublKey_t),sizeof(CRYS_ECPKI_PublKey_t))" dtype="DxUint8_t" />
  </param>
  -->
  <param name="MessageIn_ptr" direction="i" ptype="array(MessageInSizeBytes,4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
  <param name="MessageInSizeBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"  />
  -->
    <!--
    TBD: to check what is the max size and if we can make it max int without a value
    -->
  <param name="EncrMessageOut_ptr" direction="o" ptype="array(*EncrMessOutSize_ptr,4*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
  <param name="EncrMessOutSize_ptr" direction="io" ptype="ref" dtype="le32(DxUint32_t)"  />
  -->
  <param name="IsEphemerKeyInternal" direction="i" ptype="val" dtype="DxInt8_t"  />
  -->
  <param name="EphemerPrivKeyIn_ptr" direction="i" ptype="array(EphemerPrivKeySizeBytes,4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
  <param name="EphemerPrivKeySizeBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"   />
  -->
   <param name="TempData_ptr" direction="i" ptype="ref" dtype="CRYS_EC_ELGAMAL_TempData_t"   />
  -->
  </function>


  <function name="CRYS_ECPKI_ELGAMAL_Decrypt" return="le32(CRYSError_t)">
 <!--

  CRYSError_t  CRYS_ECPKI_ELGAMAL_Decrypt (
				CRYS_ECPKI_UserPrivKey_t   *ReceiverUserPrivKey_ptr,  /*in*/
			    DxUint8_t   		       *EncrMessageIn_ptr,        /*in*/
				DxUint32_t                  EncrMessageSizeInBytes,   /*in*/
			   	DxUint8_t		           *DecrMessageOut_ptr,       /*out*/
				DxUint32_t                 *DecrMessageOutSize_ptr,   /*in*/
				CRYS_EC_ELGAMAL_TempData_t *TempData_ptr              /*in*/ );

  -->
  <param name="ReceiverUserPrivKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPrivKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PrivKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PrivKey_t),sizeof(CRYS_ECPKI_PrivKey_t))" dtype="DxUint8_t" />
  </param>
  -->
  <param name="EncrMessageIn_ptr" direction="i" ptype="array(EncrMessageSizeInBytes,4*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
  <param name="EncrMessageSizeInBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"  />
  -->
  <param name="DecrMessageOut_ptr" direction="o" ptype="array(*DecrMessageOutSize_ptr,4*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
  <param name="DecrMessageOutSize_ptr" direction="io" ptype="ref" dtype="le32(DxUint32_t)"  />
  -->
   <param name="TempData_ptr" direction="i" ptype="wsbuf(sizeof(CRYS_EC_ELGAMAL_TempData_t))" dtype="CRYS_EC_ELGAMAL_TempData_t"   />
  -->
  </function>



   <function name="CRYS_ECDH_SVDP_DH" return="le32(CRYSError_t)">
 <!--

 CRYSError_t CRYS_ECDH_SVDP_DH(
						CRYS_ECPKI_UserPublKey_t *PartnerPublKey_ptr, /*in*/
						CRYS_ECPKI_UserPrivKey_t *UserPrivKey_ptr,           /*in*/
						DxUint8_t		         *SharedSecretValue_ptr,     /*out*/
						DxUint32_t               *SharedSecrValSize_ptr,     /*in/out*/
						CRYS_ECDH_TempData_t     *TempBuff_ptr               /*in*/ );
  -->

 <param name="PartnerPublKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPublKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PublKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PublKey_t),sizeof(CRYS_ECPKI_PublKey_t))" dtype="DxUint8_t" />
  </param>
  -->
 <param name="UserPrivKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPrivKey_t" >
      <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PrivKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PrivKey_t),sizeof(CRYS_ECPKI_PrivKey_t))" dtype="DxUint8_t" />
  </param>
  -->
  <param name="SharedSecretValue_ptr" direction="o" ptype="array(*SharedSecrValSize_ptr,4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS)" dtype="DxUint8_t"  />
  -->
  <param name="SharedSecrValSize_ptr" direction="io" ptype="ref" dtype="le32(DxUint32_t)"  />
  -->
   <param name="TempBuff_ptr" direction="i" ptype="wsbuf(sizeof(CRYS_ECDH_TempData_t))" dtype="CRYS_ECDH_TempData_t"  />
  -->
  </function>



  <function name="CRYS_ECPKI_ExportPublKey" return="le32(CRYSError_t)">
<!--
 CEXPORT_C CRYSError_t CRYS_ECPKI_ExportPublKey(
                      CRYS_ECPKI_UserPublKey_t      *UserPublKey_ptr,       /*in*/
                      CRYS_ECPKI_PointCompression_t  Compression,           /*in*/
                      DxUint8_t			         *ExternPublKey_ptr,     /*in*/
                      DxUint32_t                    *PublKeySizeInBytes_ptr /*in/out*/ )

-->

<param name="UserPublKey_ptr" direction="i" ptype="ref" dtype="CRYS_ECPKI_UserPublKey_t" >
     <field name="valid_tag" direction="i" ptype="val" dtype="le32(DxUint32_t)" />
     <field name="PublKeyDbBuff" direction="i" ptype="array(sizeof(CRYS_ECPKI_PublKey_t),sizeof(CRYS_ECPKI_PublKey_t))" dtype="DxUint8_t" />
</param>
 -->
 <param name="Compression" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_PointCompression_t)"  />
 -->
 <param name="ExternPublKey_ptr" direction="o" ptype="array(*PublKeySizeInBytes_ptr,4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS*2+1)" dtype="DxUint8_t"  />
 -->
    <param name="PublKeySizeInBytes_ptr" direction="io" ptype="ref" dtype="le32(DxUint32_t)"  />
  -->
 </function>


 <function name="CRYS_ECPKI_GenKeyPair" return="le32(CRYSError_t)">
<!--
 CIMPORT_C CRYSError_t CRYS_ECPKI_GenKeyPair(
				    	CRYS_ECPKI_DomainID_t  	    DomainID,	        /*in*/
				    	CRYS_ECPKI_UserPrivKey_t   *UserPrivKey_ptr,    /*out*/
				        CRYS_ECPKI_UserPublKey_t   *UserPublKey_ptr,    /*out*/
				        CRYS_ECPKI_KG_TempData_t   *TempData_ptr        /*in*/ );

-->
<param name="DomainID" direction="i" ptype="val" dtype="le32(CRYS_ECPKI_DomainID_t)"/>
 -->
<param name="UserPrivKey_ptr" direction="o" ptype="ref" dtype="CRYS_ECPKI_UserPrivKey_t" >
      <field name="valid_tag" direction="o" ptype="val" dtype="le32(DxUint32_t)" />
      <field name="PrivKeyDbBuff" direction="o" ptype="array(sizeof(CRYS_ECPKI_PrivKey_t),sizeof(CRYS_ECPKI_PrivKey_t))" dtype="DxUint8_t" />
  </param>
 -->
 <param name="UserPublKey_ptr" direction="o" ptype="ref" dtype="CRYS_ECPKI_UserPublKey_t" >
     <field name="valid_tag" direction="o" ptype="val" dtype="le32(DxUint32_t)" />
     <field name="PublKeyDbBuff" direction="o" ptype="array(sizeof(CRYS_ECPKI_PublKey_t),sizeof(CRYS_ECPKI_PublKey_t))" dtype="DxUint8_t" />
</param>
 -->
    <param name="TempData_ptr" direction="i" ptype="wsbuf(sizeof(CRYS_ECPKI_KG_TempData_t))" dtype="CRYS_ECPKI_KG_TempData_t"  />
  -->
 </function>




 </api>
