/* Generated file - DO NOT EDIT! */
/* Generated by utils/src/sep_rpc_gen/sep_rpc_gen.py@2451 at 2012-09-20 11:56:58.509141 */
/*******************************************************************
* (c) Copyright 2011-2012 Discretix Technologies Ltd.              *
* This file is licensed under the terms provided in the file       *
* libcc54/LICENSE in this directory or a parent directory          *
********************************************************************/

/* \file crys_ecc_seprpc.h
 * SeP-RPC header file for CrysEcc API */

#ifndef __CRYS_ECC_SEPRPC_H__
#define __CRYS_ECC_SEPRPC_H__

#define SEPRPC_AGENT_ID_CrysEcc 4

#include "crys_host_rpc_config.h"
#include "crys_ecpki_error.h"
#include "crys_ecpki_build.h"
#include "crys_ecpki_types.h"
#include "crys_ecpki_ecdsa.h"
#include "crys_ecpki_elgamal.h"
#include "crys_ecpki_kg.h"
#include "crys_ecpki_dh.h"
#include "sep_rpc.h"
#include "dx_pal_compiler.h"


/************ CRYS_ECPKI_BuildPrivKey ***************/
#define SEPRPC_FUNC_ID_CRYS_ECPKI_BuildPrivKey 1
/*
CRYSError_t CRYS_ECPKI_BuildPrivKey(
	CRYS_ECPKI_DomainID_t DomainID,
	DxUint8_t PrivKeyIn_ptr[],
	DxUint32_t PrivKeySizeInBytes,
	CRYS_ECPKI_UserPrivKey_t *UserPrivKey_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECPKI_BuildPrivKey 0
#if SEPRPC_MEMREF_NUM_CRYS_ECPKI_BuildPrivKey > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECPKI_BuildPrivKey is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECPKI_BuildPrivKeyParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	/*le32*/CRYS_ECPKI_DomainID_t DomainID;
	DxUint8_t PrivKeyIn_ptr[4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2];
	DxUint8_t PrivKeyIn_ptr_null_flag;
	/*le32*/DxUint32_t PrivKeySizeInBytes;
	/* Output */
	CRYS_ECPKI_UserPrivKey_t __UserPrivKey_ptr;
	DxUint8_t __UserPrivKey_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECPKI_BuildPrivKeyParams_s;



/************ _DX_ECPKI_BuildPublKey ***************/
#define SEPRPC_FUNC_ID__DX_ECPKI_BuildPublKey 2
/*
CRYSError_t _DX_ECPKI_BuildPublKey(
	CRYS_ECPKI_DomainID_t DomainID,
	DxUint8_t PublKeyIn_ptr[],
	DxUint32_t PublKeySizeInBytes,
	EC_PublKeyCheckMode_t CheckMode,
	CRYS_ECPKI_UserPublKey_t *UserPublKey_ptr,
	CRYS_ECPKI_BUILD_TempData_t *TempBuff_ptr)
*/

#define SEPRPC_MEMREF_NUM__DX_ECPKI_BuildPublKey 0
#if SEPRPC_MEMREF_NUM__DX_ECPKI_BuildPublKey > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM__DX_ECPKI_BuildPublKey is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc__DX_ECPKI_BuildPublKeyParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	/*le32*/CRYS_ECPKI_DomainID_t DomainID;
	DxUint8_t PublKeyIn_ptr[4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2];
	DxUint8_t PublKeyIn_ptr_null_flag;
	/*le32*/DxUint32_t PublKeySizeInBytes;
	/*le32*/EC_PublKeyCheckMode_t CheckMode;
	DxUint32_t  TempBuff_ptr_size;
	/* Output */
	CRYS_ECPKI_UserPublKey_t __UserPublKey_ptr;
	DxUint8_t __UserPublKey_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc__DX_ECPKI_BuildPublKeyParams_s;



/************ CRYS_ECDSA_SignInit ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDSA_SignInit 3
/*
CRYSError_t CRYS_ECDSA_SignInit(
	CRYS_ECDSA_SignUserContext_t *SignUserContext_ptr,
	CRYS_ECPKI_UserPrivKey_t *SignerPrivKey_ptr,
	CRYS_ECPKI_HASH_OpMode_t HashMode)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDSA_SignInit 0
#if SEPRPC_MEMREF_NUM_CRYS_ECDSA_SignInit > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDSA_SignInit is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECDSA_SignInitParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	CRYS_ECPKI_UserPrivKey_t __SignerPrivKey_ptr;
	DxUint8_t __SignerPrivKey_ptr_null_flag;
	/*le32*/CRYS_ECPKI_HASH_OpMode_t HashMode;
	/* Input/Output */
	CRYS_ECDSA_SignUserContext_t __SignUserContext_ptr;
	DxUint8_t __SignUserContext_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDSA_SignInitParams_s;



/************ CRYS_ECDSA_SignUpdate ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDSA_SignUpdate 4
/*
CRYSError_t CRYS_ECDSA_SignUpdate(
	CRYS_ECDSA_SignUserContext_t *SignUserContext_ptr,
	DxUint8_t *MessageDataIn_ptr,
	DxUint32_t DataInSize)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDSA_SignUpdate 1
#if SEPRPC_MEMREF_NUM_CRYS_ECDSA_SignUpdate > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDSA_SignUpdate is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif
#define SEPRPC_MEMREF_IDX_MessageDataIn_ptr 0

typedef struct SepRpc_CRYS_ECDSA_SignUpdateParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	struct seprpc_memref memref[SEPRPC_MEMREF_NUM_CRYS_ECDSA_SignUpdate];
	/* Input */
	/*le32*/DxUint32_t DataInSize;
	/* Input/Output */
	CRYS_ECDSA_SignUserContext_t __SignUserContext_ptr;
	DxUint8_t __SignUserContext_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDSA_SignUpdateParams_s;



/************ _DX_ECDSA_SignFinish ***************/
#define SEPRPC_FUNC_ID__DX_ECDSA_SignFinish 5
/*
CRYSError_t _DX_ECDSA_SignFinish(
	CRYS_ECDSA_SignUserContext_t *SignUserContext_ptr,
	DxUint8_t SignatureOut_ptr[],
	DxUint32_t *SignatureOutSize_ptr,
	DxInt8_t IsEphemerKeyInternal,
	DxUint32_t EphemerKeyData_ptr[])
*/

#define SEPRPC_MEMREF_NUM__DX_ECDSA_SignFinish 0
#if SEPRPC_MEMREF_NUM__DX_ECDSA_SignFinish > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM__DX_ECDSA_SignFinish is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc__DX_ECDSA_SignFinishParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	CRYS_ECDSA_SignUserContext_t __SignUserContext_ptr;
	DxUint8_t __SignUserContext_ptr_null_flag;
	DxInt8_t IsEphemerKeyInternal;
	DxUint32_t EphemerKeyData_ptr[4*(CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+1)+2*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t EphemerKeyData_ptr_null_flag;
	/* Input/Output */
	/*le32*/DxUint32_t __SignatureOutSize_ptr;
	DxUint8_t __SignatureOutSize_ptr_null_flag;
	/* Output */
	DxUint8_t SignatureOut_ptr[4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2];
	DxUint8_t SignatureOut_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc__DX_ECDSA_SignFinishParams_s;



/************ CRYS_ECDSA_Sign ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDSA_Sign 6
/*
CRYSError_t CRYS_ECDSA_Sign(
	CRYS_ECDSA_SignUserContext_t *SignUserContext_ptr,
	CRYS_ECPKI_UserPrivKey_t *SignerPrivKey_ptr,
	CRYS_ECPKI_HASH_OpMode_t HashMode,
	DxUint8_t *MessageDataIn_ptr,
	DxUint32_t MessageSizeInBytes,
	DxUint8_t SignatureOut_ptr[],
	DxUint32_t *SignatureOutSize_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDSA_Sign 1
#if SEPRPC_MEMREF_NUM_CRYS_ECDSA_Sign > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDSA_Sign is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif
#define SEPRPC_MEMREF_IDX_MessageDataIn_ptr 0

typedef struct SepRpc_CRYS_ECDSA_SignParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	struct seprpc_memref memref[SEPRPC_MEMREF_NUM_CRYS_ECDSA_Sign];
	/* Input */
	DxUint32_t  SignUserContext_ptr_size;
	CRYS_ECPKI_UserPrivKey_t __SignerPrivKey_ptr;
	DxUint8_t __SignerPrivKey_ptr_null_flag;
	/*le32*/CRYS_ECPKI_HASH_OpMode_t HashMode;
	/*le32*/DxUint32_t MessageSizeInBytes;
	/* Input/Output */
	/*le32*/DxUint32_t __SignatureOutSize_ptr;
	DxUint8_t __SignatureOutSize_ptr_null_flag;
	/* Output */
	DxUint8_t SignatureOut_ptr[4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS+2];
	DxUint8_t SignatureOut_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDSA_SignParams_s;



/************ CRYS_ECDSA_VerifyInit ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDSA_VerifyInit 7
/*
CRYSError_t CRYS_ECDSA_VerifyInit(
	CRYS_ECDSA_VerifyUserContext_t *VerifyUserContext_ptr,
	CRYS_ECPKI_UserPublKey_t *SignerPublKey_ptr,
	CRYS_ECPKI_HASH_OpMode_t HashMode)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyInit 0
#if SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyInit > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyInit is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECDSA_VerifyInitParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	CRYS_ECPKI_UserPublKey_t __SignerPublKey_ptr;
	DxUint8_t __SignerPublKey_ptr_null_flag;
	/*le32*/CRYS_ECPKI_HASH_OpMode_t HashMode;
	/* Input/Output */
	CRYS_ECDSA_VerifyUserContext_t __VerifyUserContext_ptr;
	DxUint8_t __VerifyUserContext_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDSA_VerifyInitParams_s;



/************ CRYS_ECDSA_VerifyUpdate ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDSA_VerifyUpdate 8
/*
CRYSError_t CRYS_ECDSA_VerifyUpdate(
	CRYS_ECDSA_VerifyUserContext_t *VerifyUserContext_ptr,
	DxUint8_t *MessageDataIn_ptr,
	DxUint32_t DataInSize)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyUpdate 1
#if SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyUpdate > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyUpdate is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif
#define SEPRPC_MEMREF_IDX_MessageDataIn_ptr 0

typedef struct SepRpc_CRYS_ECDSA_VerifyUpdateParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	struct seprpc_memref memref[SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyUpdate];
	/* Input */
	/*le32*/DxUint32_t DataInSize;
	/* Input/Output */
	CRYS_ECDSA_VerifyUserContext_t __VerifyUserContext_ptr;
	DxUint8_t __VerifyUserContext_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDSA_VerifyUpdateParams_s;



/************ CRYS_ECDSA_VerifyFinish ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDSA_VerifyFinish 9
/*
CRYSError_t CRYS_ECDSA_VerifyFinish(
	CRYS_ECDSA_VerifyUserContext_t *VerifyUserContext_ptr,
	DxUint8_t SignatureIn_ptr[],
	DxUint32_t SignatureSizeBytes)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyFinish 0
#if SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyFinish > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDSA_VerifyFinish is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECDSA_VerifyFinishParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	DxUint8_t SignatureIn_ptr[4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t SignatureIn_ptr_null_flag;
	/*le32*/DxUint32_t SignatureSizeBytes;
	/* Input/Output */
	CRYS_ECDSA_VerifyUserContext_t __VerifyUserContext_ptr;
	DxUint8_t __VerifyUserContext_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDSA_VerifyFinishParams_s;



/************ CRYS_ECDSA_Verify ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDSA_Verify 10
/*
CRYSError_t CRYS_ECDSA_Verify(
	CRYS_ECDSA_VerifyUserContext_t *VerifyUserContext_ptr,
	CRYS_ECPKI_UserPublKey_t *UserPublKey_ptr,
	CRYS_ECPKI_HASH_OpMode_t HashMode,
	DxUint8_t SignatureIn_ptr[],
	DxUint32_t SignatureSizeBytes,
	DxUint8_t *MessageDataIn_ptr,
	DxUint32_t MessageSizeInBytes)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDSA_Verify 1
#if SEPRPC_MEMREF_NUM_CRYS_ECDSA_Verify > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDSA_Verify is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif
#define SEPRPC_MEMREF_IDX_MessageDataIn_ptr 0

typedef struct SepRpc_CRYS_ECDSA_VerifyParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	struct seprpc_memref memref[SEPRPC_MEMREF_NUM_CRYS_ECDSA_Verify];
	/* Input */
	DxUint32_t  VerifyUserContext_ptr_size;
	CRYS_ECPKI_UserPublKey_t __UserPublKey_ptr;
	DxUint8_t __UserPublKey_ptr_null_flag;
	/*le32*/CRYS_ECPKI_HASH_OpMode_t HashMode;
	DxUint8_t SignatureIn_ptr[4*2*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t SignatureIn_ptr_null_flag;
	/*le32*/DxUint32_t SignatureSizeBytes;
	/*le32*/DxUint32_t MessageSizeInBytes;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDSA_VerifyParams_s;



/************ _DX_ECPKI_ELGAMAL_Encrypt ***************/
#define SEPRPC_FUNC_ID__DX_ECPKI_ELGAMAL_Encrypt 11
/*
CRYSError_t _DX_ECPKI_ELGAMAL_Encrypt(
	CRYS_ECPKI_UserPublKey_t *ReceiverUserPublKey_ptr,
	DxUint8_t MessageIn_ptr[],
	DxUint32_t MessageInSizeBytes,
	DxUint8_t EncrMessageOut_ptr[],
	DxUint32_t *EncrMessOutSize_ptr,
	DxInt8_t IsEphemerKeyInternal,
	DxUint8_t EphemerPrivKeyIn_ptr[],
	DxUint32_t EphemerPrivKeySizeBytes,
	CRYS_EC_ELGAMAL_TempData_t *TempData_ptr)
*/

#define SEPRPC_MEMREF_NUM__DX_ECPKI_ELGAMAL_Encrypt 0
#if SEPRPC_MEMREF_NUM__DX_ECPKI_ELGAMAL_Encrypt > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM__DX_ECPKI_ELGAMAL_Encrypt is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc__DX_ECPKI_ELGAMAL_EncryptParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	CRYS_ECPKI_UserPublKey_t __ReceiverUserPublKey_ptr;
	DxUint8_t __ReceiverUserPublKey_ptr_null_flag;
	DxUint8_t MessageIn_ptr[4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t MessageIn_ptr_null_flag;
	/*le32*/DxUint32_t MessageInSizeBytes;
	DxInt8_t IsEphemerKeyInternal;
	DxUint8_t EphemerPrivKeyIn_ptr[4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t EphemerPrivKeyIn_ptr_null_flag;
	/*le32*/DxUint32_t EphemerPrivKeySizeBytes;
	CRYS_EC_ELGAMAL_TempData_t __TempData_ptr;
	DxUint8_t __TempData_ptr_null_flag;
	/* Input/Output */
	/*le32*/DxUint32_t __EncrMessOutSize_ptr;
	DxUint8_t __EncrMessOutSize_ptr_null_flag;
	/* Output */
	DxUint8_t EncrMessageOut_ptr[4*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t EncrMessageOut_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc__DX_ECPKI_ELGAMAL_EncryptParams_s;



/************ CRYS_ECPKI_ELGAMAL_Decrypt ***************/
#define SEPRPC_FUNC_ID_CRYS_ECPKI_ELGAMAL_Decrypt 12
/*
CRYSError_t CRYS_ECPKI_ELGAMAL_Decrypt(
	CRYS_ECPKI_UserPrivKey_t *ReceiverUserPrivKey_ptr,
	DxUint8_t EncrMessageIn_ptr[],
	DxUint32_t EncrMessageSizeInBytes,
	DxUint8_t DecrMessageOut_ptr[],
	DxUint32_t *DecrMessageOutSize_ptr,
	CRYS_EC_ELGAMAL_TempData_t *TempData_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECPKI_ELGAMAL_Decrypt 0
#if SEPRPC_MEMREF_NUM_CRYS_ECPKI_ELGAMAL_Decrypt > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECPKI_ELGAMAL_Decrypt is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECPKI_ELGAMAL_DecryptParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	CRYS_ECPKI_UserPrivKey_t __ReceiverUserPrivKey_ptr;
	DxUint8_t __ReceiverUserPrivKey_ptr_null_flag;
	DxUint8_t EncrMessageIn_ptr[4*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t EncrMessageIn_ptr_null_flag;
	/*le32*/DxUint32_t EncrMessageSizeInBytes;
	DxUint32_t  TempData_ptr_size;
	/* Input/Output */
	/*le32*/DxUint32_t __DecrMessageOutSize_ptr;
	DxUint8_t __DecrMessageOutSize_ptr_null_flag;
	/* Output */
	DxUint8_t DecrMessageOut_ptr[4*4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t DecrMessageOut_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECPKI_ELGAMAL_DecryptParams_s;



/************ CRYS_ECDH_SVDP_DH ***************/
#define SEPRPC_FUNC_ID_CRYS_ECDH_SVDP_DH 13
/*
CRYSError_t CRYS_ECDH_SVDP_DH(
	CRYS_ECPKI_UserPublKey_t *PartnerPublKey_ptr,
	CRYS_ECPKI_UserPrivKey_t *UserPrivKey_ptr,
	DxUint8_t SharedSecretValue_ptr[],
	DxUint32_t *SharedSecrValSize_ptr,
	CRYS_ECDH_TempData_t *TempBuff_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECDH_SVDP_DH 0
#if SEPRPC_MEMREF_NUM_CRYS_ECDH_SVDP_DH > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECDH_SVDP_DH is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECDH_SVDP_DHParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	CRYS_ECPKI_UserPublKey_t __PartnerPublKey_ptr;
	DxUint8_t __PartnerPublKey_ptr_null_flag;
	CRYS_ECPKI_UserPrivKey_t __UserPrivKey_ptr;
	DxUint8_t __UserPrivKey_ptr_null_flag;
	DxUint32_t  TempBuff_ptr_size;
	/* Input/Output */
	/*le32*/DxUint32_t __SharedSecrValSize_ptr;
	DxUint8_t __SharedSecrValSize_ptr_null_flag;
	/* Output */
	DxUint8_t SharedSecretValue_ptr[4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS];
	DxUint8_t SharedSecretValue_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECDH_SVDP_DHParams_s;



/************ CRYS_ECPKI_ExportPublKey ***************/
#define SEPRPC_FUNC_ID_CRYS_ECPKI_ExportPublKey 14
/*
CRYSError_t CRYS_ECPKI_ExportPublKey(
	CRYS_ECPKI_UserPublKey_t *UserPublKey_ptr,
	CRYS_ECPKI_PointCompression_t Compression,
	DxUint8_t ExternPublKey_ptr[],
	DxUint32_t *PublKeySizeInBytes_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECPKI_ExportPublKey 0
#if SEPRPC_MEMREF_NUM_CRYS_ECPKI_ExportPublKey > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECPKI_ExportPublKey is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECPKI_ExportPublKeyParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	CRYS_ECPKI_UserPublKey_t __UserPublKey_ptr;
	DxUint8_t __UserPublKey_ptr_null_flag;
	/*le32*/CRYS_ECPKI_PointCompression_t Compression;
	/* Input/Output */
	/*le32*/DxUint32_t __PublKeySizeInBytes_ptr;
	DxUint8_t __PublKeySizeInBytes_ptr_null_flag;
	/* Output */
	DxUint8_t ExternPublKey_ptr[4*CRYS_ECPKI_MODUL_MAX_LENGTH_IN_WORDS*2+1];
	DxUint8_t ExternPublKey_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECPKI_ExportPublKeyParams_s;



/************ CRYS_ECPKI_GenKeyPair ***************/
#define SEPRPC_FUNC_ID_CRYS_ECPKI_GenKeyPair 15
/*
CRYSError_t CRYS_ECPKI_GenKeyPair(
	CRYS_ECPKI_DomainID_t DomainID,
	CRYS_ECPKI_UserPrivKey_t *UserPrivKey_ptr,
	CRYS_ECPKI_UserPublKey_t *UserPublKey_ptr,
	CRYS_ECPKI_KG_TempData_t *TempData_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_ECPKI_GenKeyPair 0
#if SEPRPC_MEMREF_NUM_CRYS_ECPKI_GenKeyPair > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_ECPKI_GenKeyPair is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_ECPKI_GenKeyPairParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	/*le32*/CRYS_ECPKI_DomainID_t DomainID;
	DxUint32_t  TempData_ptr_size;
	/* Output */
	CRYS_ECPKI_UserPrivKey_t __UserPrivKey_ptr;
	DxUint8_t __UserPrivKey_ptr_null_flag;
	CRYS_ECPKI_UserPublKey_t __UserPublKey_ptr;
	DxUint8_t __UserPublKey_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_ECPKI_GenKeyPairParams_s;


#endif /*__CRYS_ECC_SEPRPC_H__*/
