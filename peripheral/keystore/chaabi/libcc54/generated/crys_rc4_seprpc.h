/* Generated file - DO NOT EDIT! */
/* Generated by utils/src/sep_rpc_gen/sep_rpc_gen.py@2451 at 2012-09-20 11:57:05.160271 */
/*******************************************************************
* (c) Copyright 2011-2012 Discretix Technologies Ltd.              *
* This file is licensed under the terms provided in the file       *
* libcc54/LICENSE in this directory or a parent directory          *
********************************************************************/

/* \file crys_rc4_seprpc.h
 * SeP-RPC header file for CrysRc4 API */

#ifndef __CRYS_RC4_SEPRPC_H__
#define __CRYS_RC4_SEPRPC_H__

#define SEPRPC_AGENT_ID_CrysRc4 5

#include "crys_rc4.h"
#include "crys_rc4_error.h"
#include "sep_rpc.h"
#include "dx_pal_compiler.h"


/************ CRYS_RC4_Init ***************/
#define SEPRPC_FUNC_ID_CRYS_RC4_Init 1
/*
CRYSError_t CRYS_RC4_Init(
	CRYS_RC4UserContext_t *ContextID_ptr,
	DxUint8_t Key_ptr[],
	DxUint32_t KeySizeInBytes)
*/

#define SEPRPC_MEMREF_NUM_CRYS_RC4_Init 0
#if SEPRPC_MEMREF_NUM_CRYS_RC4_Init > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_RC4_Init is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_RC4_InitParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	DxUint8_t Key_ptr[CRYS_RC4_MAX_KEY_SIZE_IN_BYTES];
	DxUint8_t Key_ptr_null_flag;
	/*le32*/DxUint32_t KeySizeInBytes;
	/* Input/Output */
	CRYS_RC4UserContext_t __ContextID_ptr;
	DxUint8_t __ContextID_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_RC4_InitParams_s;



/************ CRYS_RC4_Stream ***************/
#define SEPRPC_FUNC_ID_CRYS_RC4_Stream 2
/*
CRYSError_t CRYS_RC4_Stream(
	CRYS_RC4UserContext_t *ContextID_ptr,
	DxUint8_t *DataIn_ptr,
	DxUint32_t DataInSize,
	DxUint8_t *DataOut_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_RC4_Stream 2
#if SEPRPC_MEMREF_NUM_CRYS_RC4_Stream > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_RC4_Stream is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif
#define SEPRPC_MEMREF_IDX_DataIn_ptr 0
#define SEPRPC_MEMREF_IDX_DataOut_ptr 1

typedef struct SepRpc_CRYS_RC4_StreamParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	struct seprpc_memref memref[SEPRPC_MEMREF_NUM_CRYS_RC4_Stream];
	/* Input */
	/*le32*/DxUint32_t DataInSize;
	/* Input/Output */
	CRYS_RC4UserContext_t __ContextID_ptr;
	DxUint8_t __ContextID_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_RC4_StreamParams_s;



/************ CRYS_RC4_Free ***************/
#define SEPRPC_FUNC_ID_CRYS_RC4_Free 3
/*
CRYSError_t CRYS_RC4_Free(
	CRYS_RC4UserContext_t *ContextID_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_RC4_Free 0
#if SEPRPC_MEMREF_NUM_CRYS_RC4_Free > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_RC4_Free is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_RC4_FreeParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input/Output */
	CRYS_RC4UserContext_t __ContextID_ptr;
	DxUint8_t __ContextID_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_RC4_FreeParams_s;



/************ CRYS_RC4 ***************/
#define SEPRPC_FUNC_ID_CRYS_RC4 4
/*
CRYSError_t CRYS_RC4(
	DxUint8_t Key_ptr[],
	DxUint32_t KeySizeInBytes,
	DxUint8_t *DataIn_ptr,
	DxUint32_t DataInSize,
	DxUint8_t *DataOut_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_RC4 2
#if SEPRPC_MEMREF_NUM_CRYS_RC4 > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_RC4 is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif
#define SEPRPC_MEMREF_IDX_DataIn_ptr 0
#define SEPRPC_MEMREF_IDX_DataOut_ptr 1

typedef struct SepRpc_CRYS_RC4Params {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	struct seprpc_memref memref[SEPRPC_MEMREF_NUM_CRYS_RC4];
	/* Input */
	DxUint8_t Key_ptr[CRYS_RC4_MAX_KEY_SIZE_IN_BYTES];
	DxUint8_t Key_ptr_null_flag;
	/*le32*/DxUint32_t KeySizeInBytes;
	/*le32*/DxUint32_t DataInSize;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_RC4Params_s;


#endif /*__CRYS_RC4_SEPRPC_H__*/
