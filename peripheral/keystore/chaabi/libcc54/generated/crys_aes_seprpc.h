/* Generated file - DO NOT EDIT! */
/* Generated by utils/src/sep_rpc_gen/sep_rpc_gen.py@2451 at 2012-09-20 11:54:02.082285 */
/*******************************************************************
* (c) Copyright 2011-2012 Discretix Technologies Ltd.              *
* This file is licensed under the terms provided in the file       *
* libcc54/LICENSE in this directory or a parent directory          *
********************************************************************/

/* \file crys_aes_seprpc.h
 * SeP-RPC header file for CrysAes API */

#ifndef __CRYS_AES_SEPRPC_H__
#define __CRYS_AES_SEPRPC_H__

#define SEPRPC_AGENT_ID_CrysAes 1

#include "crys_aes.h"
#include "crys_aes_error.h"
#include "sep_rpc.h"
#include "dx_pal_compiler.h"


/************ CRYS_AES_Wrap ***************/
#define SEPRPC_FUNC_ID_CRYS_AES_Wrap 1
/*
CRYSError_t CRYS_AES_Wrap(
	DxUint8_t DataIn_ptr[],
	DxUint32_t DataInLen,
	DxUint8_t KeyData[],
	CRYS_AES_KeySize_t KeySize,
	DxInt8_t Reserved,
	DxUint8_t WrapDataOut_ptr[],
	DxUint32_t *WrapDataLen_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_AES_Wrap 0
#if SEPRPC_MEMREF_NUM_CRYS_AES_Wrap > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_AES_Wrap is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_AES_WrapParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	DxUint8_t DataIn_ptr[CRYS_AES_WRAP_DATA_MAX_SIZE_IN_BYTES];
	DxUint8_t DataIn_ptr_null_flag;
	/*le32*/DxUint32_t DataInLen;
	DxUint8_t KeyData[32];
	DxUint8_t KeyData_null_flag;
	/*le32*/CRYS_AES_KeySize_t KeySize;
	DxInt8_t Reserved;
	/* Input/Output */
	/*le32*/DxUint32_t __WrapDataLen_ptr;
	DxUint8_t __WrapDataLen_ptr_null_flag;
	/* Output */
	DxUint8_t WrapDataOut_ptr[(CRYS_AES_WRAP_DATA_MAX_SIZE_IN_BYTES+CRYS_AES_WRAP_BLOCK_SIZE_IN_BYTES)];
	DxUint8_t WrapDataOut_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_AES_WrapParams_s;



/************ CRYS_AES_Unwrap ***************/
#define SEPRPC_FUNC_ID_CRYS_AES_Unwrap 2
/*
CRYSError_t CRYS_AES_Unwrap(
	DxUint8_t WrapDataIn_ptr[],
	DxUint32_t WrapDataInLen,
	DxUint8_t KeyData[],
	CRYS_AES_KeySize_t KeySize,
	DxInt8_t Reserved,
	DxUint8_t DataOut_ptr[],
	DxUint32_t *DataOutLen_ptr)
*/

#define SEPRPC_MEMREF_NUM_CRYS_AES_Unwrap 0
#if SEPRPC_MEMREF_NUM_CRYS_AES_Unwrap > SEP_RPC_MAX_MEMREF_PER_FUNC
#error SEPRPC_MEMREF_NUM_CRYS_AES_Unwrap is more than SEP_RPC_MAX_MEMREF_PER_FUNC
#endif

typedef struct SepRpc_CRYS_AES_UnwrapParams {
	uint32_t num_of_memrefs; /* Number of elements in the memRef array */
	/* Input */
	DxUint8_t WrapDataIn_ptr[ (CRYS_AES_WRAP_DATA_MAX_SIZE_IN_BYTES + CRYS_AES_WRAP_BLOCK_SIZE_IN_BYTES)];
	DxUint8_t WrapDataIn_ptr_null_flag;
	/*le32*/DxUint32_t WrapDataInLen;
	DxUint8_t KeyData[32];
	DxUint8_t KeyData_null_flag;
	/*le32*/CRYS_AES_KeySize_t KeySize;
	DxInt8_t Reserved;
	/* Input/Output */
	/*le32*/DxUint32_t __DataOutLen_ptr;
	DxUint8_t __DataOutLen_ptr_null_flag;
	/* Output */
	DxUint8_t DataOut_ptr[CRYS_AES_WRAP_DATA_MAX_SIZE_IN_BYTES];
	DxUint8_t DataOut_ptr_null_flag;
	CRYSError_t _funcRetCode;
} SepRpc_CRYS_AES_UnwrapParams_s;


#endif /*__CRYS_AES_SEPRPC_H__*/
